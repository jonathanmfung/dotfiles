;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(org-read-date-history goto-line-history xref--read-identifier-history consult--grep-history swiper-history tmm--history consult--crm-history shell-command-history command-history ivy-history bookmark-history consult-imenu--history search-ring consult--buffer-history input-method-history read-expression-history consult--find-history yes-or-no-p-history read-number-history consult--line-history consult--keep-lines-history empty-history buffer-name-history file-name-history minibuffer-history extended-command-history))
(setq consult--grep-history '("#blink" "HMI"))
(setq swiper-history '("com" "the c" "assis" "helo"))
(setq tmm--history '("h==>Help" "m==>Minibuf" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq command-history '((describe-key '(("\336" . [134217822]))) (describe-key '(("" . [23]))) (capitalize-word 1) (execute-extended-command nil "capitalize-word" #("capi" 0 4 (face nil))) (upcase-word 1) (execute-extended-command nil "upcase-word" #("upcas" 0 5 (face nil))) (describe-key '(("" . [7]))) (describe-key '(("\344" . [134217796]))) (describe-variable 'sentence-end-without-period) (describe-function 'sentence-end) (kill-buffer "paragraphs.el") (find-file "/usr/share/emacs/28.0.50/lisp/textmodes/paragraphs.el" t) (describe-variable 'sentence-end-double-space) (org-tree-to-indirect-buffer nil) (execute-extended-command nil "org-tree-to-indirect-buffer" nil) (org-tree-to-indirect-buffer nil) (execute-extended-command nil "org-tree-to-indirect-buffer" #("org indirec" 0 11 (face nil))) (kill-buffer "research_paper.org<2>") (clone-indirect-buffer nil t) (execute-extended-command nil "clone-indirect-buffer" #("indired" 0 7 (face nil))) (execute-extended-command nil "clone-buffer" #("clone " 0 6 (face nil))) (kill-buffer "*Warnings*") (switch-to-prev-buffer) (execute-extended-command nil "switch-to-prev-buffer" #("buffer switch re" 0 16 (face nil))) (describe-function 'scroll-up-line) (scroll-down-line 1) (execute-extended-command nil "scroll-down-line" #("down line" 0 9 (face nil))) (scroll-up-line 1) (execute-extended-command nil "scroll-up-line" #("scroll line" 0 11 (face nil))) (scroll-up nil) (execute-extended-command nil "scroll-up" #("scroll pa" 0 9 (face nil))) (cursor-flash-mode) (execute-extended-command nil "cursor-flash-mode" #("cur" 0 3 (face nil))) (describe-variable 'avy-lead-faces) (eval-expression '(setq avy-background nil) nil nil 127) (avy-goto-word-1 100 nil) (execute-extended-command nil "avy-goto-word-1" nil) (avy-goto-word-1 99 nil) (execute-extended-command nil "avy-goto-word-1" #("avy word" 0 8 (face nil))) (eval-expression '(setq avy-background t) nil nil 127) (cursor-flash-mode) (execute-extended-command nil "cursor-flash-mode" nil) (cursor-flash-mode) (execute-extended-command nil "cursor-flash-mode" #("flash" 0 5 (face nil))) (avy-isearch) (execute-extended-command nil "avy-isearch" #("avy ise" 0 7 (face nil))) (avy-resume) (execute-extended-command nil "avy-resume" #("avy res" 0 7 (face nil))) (swiper) (execute-extended-command nil "swiper" #("swip" 0 4 (face nil))) (swiper-isearch) (execute-extended-command nil "swiper-isearch" #("swiper" 0 6 (face nil))) (swiper-C-s 1) (execute-extended-command nil "swiper-C-s" #("swiper" 0 6 (face nil))) (swiper) (execute-extended-command nil "swiper" #("swiper" 0 6 (face nil))) (swiper) (execute-extended-command nil "swiper" #("swiper" 0 6 (face nil))) (cursor-flash-mode) (execute-extended-command nil "cursor-flash-mode" nil) (package-delete #s(package-desc nav-flash (20210906 1942) "Briefly highlight the current line" nil nil nil "/home/jonat/.config/emacs-configs/emacs.d-my-vanilla/elpa/nav-flash-20210906.1942" ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface") (:maintainer "Roland Walker" . "walker@pobox.com") (:authors ("Roland Walker" . "walker@pobox.com")) (:commit . "2e31f32085757e1dfdd8ec78e9940fd1c88750de")) nil) nil nil) (execute-extended-command nil "package-delete" nil) (eval-expression '(nav-flash-show) nil nil 127) (execute-extended-command nil "package-install" nil) (eval-expression '(nav-flash-show) nil nil 127) (package-install 'nav-flash nil) (execute-extended-command nil "package-install" #("pack in" 0 7 (face nil))) (cursor-flash-mode) (execute-extended-command nil "cursor-flash-mode" nil) (cursor-flash-mode) (execute-extended-command nil "cursor-flash-mode" #("cursor flash" 0 12 (face nil))) (eval-buffer) (execute-extended-command nil "eval-buffer" #("eval " 0 5 (face nil))) (package-delete #s(package-desc cursor-flash (20210722 445) "Highlight the cursor on buffer/window-switch" ((emacs (24 3))) nil nil "/home/jonat/.config/emacs-configs/emacs.d-my-vanilla/elpa/cursor-flash-20210722.445" ((:url . "https://github.com/Boruch-Baum/emacs-cursor-flash") (:keywords "convenience" "faces" "maint") (:commit . "6bb54a1e2e1bf9df80926718b1b8b9ee49080484")) nil) nil nil) (execute-extended-command nil "package-delete" nil) (package-install 'cursor-flash nil) (execute-extended-command nil "package-install" nil) (package-delete #s(package-desc cursor-flash (20210722 445) "Highlight the cursor on buffer/window-switch" ((emacs (24 3))) nil nil "/home/jonat/.config/emacs-configs/emacs.d-my-vanilla/elpa/cursor-flash-20210722.445" ((:url . "https://github.com/Boruch-Baum/emacs-cursor-flash") (:keywords "convenience" "faces" "maint") (:commit . "6bb54a1e2e1bf9df80926718b1b8b9ee49080484")) nil) nil nil) (execute-extended-command nil "package-delete" #("pack dele" 0 9 (face nil))) (eval-expression '(cursor-flash-mode) nil nil 127) (execute-extended-command nil "package-install" nil) (package-install 'cursor-flash nil) (execute-extended-command nil "package-install" #("pack inst" 0 9 (face nil))) (describe-variable 'avy-timeout-seconds) (bookmark-jump "init.el") (execute-extended-command nil "bookmark-jump" #("book mark" 0 9 (face nil))) (avy-goto-char-timer nil) (execute-extended-command nil "avy-goto-char-timer" nil) (avy-goto-char-timer nil) (execute-extended-command nil "avy-goto-char-timer" #("avy goto cha" 0 12 (face nil))) (avy-resume) (execute-extended-command nil "avy-resume" #("avy resume" 0 10 (face nil))) (avy-goto-word-1 100 nil) (execute-extended-command nil "avy-goto-word-1" nil) (avy-goto-word-1 116 nil) (execute-extended-command nil "avy-goto-word-1" #("avy word" 0 8 (face nil))) (avy-goto-word-0 nil) (execute-extended-command nil "avy-goto-word-0" nil) (avy-goto-word-0 nil) (execute-extended-command nil "avy-goto-word-0" nil)))
(setq bookmark-history '("init.el"))
(setq search-ring '(#("corr" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("bind" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("cu" 0 2 (isearch-regexp-function nil isearch-case-fold-search t)) #("emacs" 0 5 (isearch-regexp-function nil isearch-case-fold-search t)) #("wind" 0 4 (isearch-regexp-function nil isearch-case-fold-search t)) #("haskell" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("interac" 0 7 (isearch-case-fold-search t isearch-regexp-function t)) #("interacti" 0 9 (isearch-case-fold-search t isearch-regexp-function nil)) #("inter" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("interaction" 0 11 (isearch-case-fold-search t isearch-regexp-function nil)) #("int" 0 3 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq consult--buffer-history '("init.el􀀁" "research_paper.org􀀁" "init.el􀀁" "*scratch*􀀁" "research_paper.org􀀁" "init.el􀀁" "research_paper.org􀀁" "03.hs􀀁"))
(setq read-expression-history '("(setq avy-background nil)" "(setq avy-background t)" "(nav-flash-show)" "(cursor-flash-mode)" "(draw-cons-tree '(a b (c nil 1)))" "(icomplete-vertical-mode)" "(setq icomplete-separator \"\\n\")"))
(setq yes-or-no-p-history '("yes" "y" "yes" "no" "yes"))
(setq read-number-history '("100" "80"))
(setq consult--line-history '("bandpass" "hmi" "motor" "darkor" "face" "font" "save" "vertico" "icomplete ver" "consult" "vertico"))
(setq buffer-name-history '("paragraphs.el" "init.el" "research_paper.org<2>" "research_paper.org" "*Warnings*" "research_paper.org" "init.el" "*scratch*" "research_paper.org" "init.el" "research_paper.org" "*haskell*" "03.hs" ".zshrc" "rwh.hs" "*scratch*" "rwh.hs" "init.el" "rwh.hs" "HELLO" "*Warnings*"))
(setq file-name-history '("/usr/share/emacs/28.0.50/lisp/textmodes/paragraphs.el" "~/.config/emacs-configs/emacs.d-my-vanilla/init.el" "~/School/F21/BME_120_SensMotSys/pbl/research_paper.org" "~/.config/emacs-configs/emacs.d-my-vanilla/init.el" "~/School/F21/BME_120_SensMotSys/pbl/research_paper.org" "~/.config/emacs-configs/emacs.d-my-vanilla/init.el" "~/School/F21/BME_120_SensMotSys/pbl/research_paper.org" "~/haskell/CIS_194/03.hs" "~/julia/beans.jl" "~/.config/emacs-configs/emacs.d-my-vanilla/init.el" "~/.zshrc" "~/haskell/rwh.hs" "~/School/F21/BME_120_SensMotSys/BME_120_SensoryMotorSystems.org" "~/.config/emacs-configs/emacs.d-my-vanilla/init.el" "~/haskell/rwh.hs" "~/haskell/hello.hs" "~/haskell/CIS_194/" "~/.config/emacs-configs/emacs.d-my-vanilla/" "~/haskell/rwh.hs" "~/haskell/rw" "~/.config/emacs-configs/emacs.d-my-vanilla/init.el" "~/.config/emacs-configs/emacs.d-my-vanilla/ini" "~/haskell/CIS_194/" "~/.config/emacs-configs/emacs.d-my-vanilla/init.el" ".config/emacs-configs/emacs.d-my-vanilla/init.el" "~/.config/emacs-configs/emacs.d-my-vanilla/init.el" "~/elisp/MetAPI/" "~/haskell/CIS_194/01.hs" "bin/"))
(setq minibuffer-history '("sentence-end-without-period" "sentence-end" "sentence-end-double-space" "scroll-up-line" "avy-lead-faces" "nav-flash-20210906.1942" "nav-flash" "cursor-flash-20210722.445" "cursor-flash" "cursor-flash-20210722.445" "cursor-flash" "avy-timeout-seconds" "51" "use-package" "init.el" "-UKWN-Iosevka SS14-bold-normal-normal-*-*-*-*-*-d-0-iso10646-1" "set-face-attribute" "auto-fill-mode" "fill-column" "set-fill-column" "fill-paragraph" "set-fill-column" "vertico-resize" "ace-window-display-mode" "ace-window" "overlay-put" "mode-line-format" "windmove-swap-states-in-direction" "haskell-mode" "icomplete-force-complete" "icomplete-ret" "haskell-mode" "l" "lsp-mode" "mode-line-buffer-identification" "icomplete-show-matches-on-no-input" "jf/display-startup-time" "icomplete-vertical" "fido-mode" #("icomplete-separator" 0 9 (face orderless-match-face-0) 10 13 (face orderless-match-face-1)) "selectrum" "emacs-lisp-mode" "fringe-mode" "scroll-step" "blink-cursor-mode" "window" "window close"))
(setq extended-command-history '("capitalize-word" "upcase-word" "org-tree-to-indirect-buffer" "clone-indirect-buffer" "clone-buffer" "switch-to-prev-buffer" "scroll-down-line" "scroll-up-line" "scroll-up" "cursor-flash-mode" "avy-goto-word-1" "cursor-flash-mode" "avy-isearch" "avy-resume" "swiper" "swiper-isearch" "swiper-C-s" "swiper" "cursor-flash-mode" "package-delete" "package-install" "cursor-flash-mode" "eval-buffer" "package-delete" "package-install" "package-delete" "package-install" "bookmark-jump" "avy-goto-char-timer" "avy-resume" "avy-goto-word-1" "avy-goto-word-0" "avy-goto-char-timer" "avy-goto-char-2" "avy-goto-word-0" "avy-goto-whitespace-end-above" "avy-goto-char-timer" "avy-goto-char" "org-next-item" "bookmark-save" "bookmark-set" "describe-font" "describe-face" "auto-fill-mode" "fill-region" "kill-this-buffer" "revert-buffer" "set-fill-column" "auto-fill-mode" "visual-line-mode" "vertico-mode" "describe-face" "describe-font" "vertico-next" "icomplete-mode" "icomplete-vertical-mode" "vertico-mode" "icomplete-vertical-mode" "comment-dwim" "package-delete" "selectrum-mode" "vertico-mode" "selectrum-mode" #("vertico-mode" 0 7 (face orderless-match-face-0)) "selectrum-mode" "icomplete-vertical-mode" "ido-switch-buffer" "ace-window-display-mode" "ace-select-window" "ace-swap-window" "ace-select-window" "ace-window" "ace-select-window" "ace-window-display-mode" "ace-select-window" "ace-window-display-mode" "ace-select-window" "ace-window" "org-indent-mode" "visual-line-mode" "text-scale-adjust" "text-scale-increase" "text-scale-decrease" "haskell-forward-sexp" "switch-to-buffer" "help-with-tutorial" "global-display-fill-column-indicator-mode" "set-fill-column" "auto-fill-mode" "consult-buffer" "ido-switch-buffer" "help-with-tutorial" "switch-to-buffer" "read-only-mode" "secret-mode" "revert-buffer" "newline" "org-insert-todo-heading" "revert-buffer" "eval-buffer"))
