;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(cider-minibuffer-history consult--apropos-history ess--completing-hist consult-org--history counsel-org-goto-history org-link--history org-tags-history org-refile-history query-replace-history counsel-unicode-char-history xref--read-pattern-history embark--prompter-history read-from-kill-ring-history read-char-history info-lookup-history counsel-describe-symbol-history regexp-history counsel-flycheck-errors-history coding-system-history org-read-date-history goto-line-history xref--read-identifier-history consult--grep-history swiper-history tmm--history consult--crm-history shell-command-history command-history ivy-history bookmark-history consult-imenu--history search-ring consult--buffer-history input-method-history read-expression-history consult--find-history yes-or-no-p-history read-number-history consult--line-history consult--keep-lines-history empty-history buffer-name-history file-name-history minibuffer-history extended-command-history))
(setq cider-minibuffer-history '("max"))
(setq consult--apropos-history '("parse-sexp-ignore-comments" "display-monitor-attributes-list"))
(setq ess--completing-hist '("/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/ggplot2/help/tidyeval" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/rlang/help/quo_label" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/rlang/help/enquo" "/usr/lib64/R/library/base/help/plot" "/usr/lib64/R/library/base/help/norm" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/dplyr/help/nth" "/usr/lib64/R/library/base/help/strsplit" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/data.table/help/assign" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/rlang/help/dyn-dots" "/usr/lib64/R/library/base/help/split" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/rlang/help/enquo" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/ggplot2/help/tidyeval" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/rlang/help/expr" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/ggplot2/help/vars" "/usr/lib64/R/library/base/help/ifelse" "/usr/lib64/R/library/base/help/cbind" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/data.table/help/rbindlist" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/rethinking/help/compare" "/usr/lib64/R/library/base/help/plot" "/home/jonat/R/x86_64-pc-linux-gnu-library/4.1/loo/help/loo" "hw2" "/usr/lib64/R/library/base/help/plot"))
(setq consult-org--history '("pipe"))
(setq counsel-org-goto-history '(#("home 3" 0 6 (ivy-index 2)) "Statistical Rethinking/Homework/Homework 3"))
(setq query-replace-history '(";" "#" "" "," " " "
" "\\n" "\\n" "

" "


" "" "	" "

" "


" "
" "

" "
" "\\n\\n" "\\n\\n" "Action" "Arg"))
(setq counsel-unicode-char-history '(#("3000" 0 4 (ivy-index 0)) "003000 IDEOGRAPHIC SPACE                                          　" #("2003" 0 4 (ivy-index 0)) "002003 EM SPACE                                                    " #("2000" 0 4 (ivy-index 0)) "002000 EN QUAD                                                     "))
(setq read-char-history '("d" "a" "s" "g" "" "" "" "a" "" "a" "" "" "" "" "" "" "f" "e"))
(setq info-lookup-history '("typeSide" "timeLag"))
(setq regexp-history '("use" "err" "blue"))
(setq coding-system-history '("utf-8-unix" "utf-8"))
(setq xref--read-identifier-history '("jf/hydra-resize-window/body" "noteTimeTypeList"))
(setq consult--grep-history '("#blink" "HMI"))
(setq swiper-history '("com" "the c" "assis" "helo"))
(setq tmm--history '("h==>Help" "O==>Org" "T==>Table" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq shell-command-history '("sed \"/       /d\" data_description.txt > data_description-short.txt" "sed \"/'       '/d\"" "notify-send 'error'" "ctrl" "dunstify test" "zathura" "echo $PATH"))
(setq command-history '((find-file "~/julia/lisp.jl" t) (helpful-callable 'looking-at) (kill-buffer "lisp.el") (helpful-variable 'forward-sexp-function) (helpful-callable 'forward-sexp) (helpful-variable 'parse-sexp-ignore-comments) (org-insert-structure-template "src") (helpful-callable 'parse-partial-sexp) (helpful-variable 'parse-sexp-ignore-comments) (find-file "~/org/lang.org" t) (find-file "~/org/lang.org" t) (find-file "~/org/lang.org" t) (replace-regexp "#" ";" nil 2091 2456 nil nil) (execute-extended-command nil "replace-regexp" nil) (replace-regexp "#" ";" nil 1549 2037 nil nil) (execute-extended-command nil "replace-regexp" nil) (replace-regexp "#" ";" nil 708 1452 nil nil) (execute-extended-command nil "replace-regexp" nil) (replace-regexp "#" ";" nil nil nil nil nil) (execute-extended-command nil "replace-regexp" #("reg repl" 0 8 (face nil))) (org-insert-structure-template "src") (org-insert-structure-template "src") (helpful-variable 'org-edit-src-content-indentation) (visual-line-mode 'toggle) (execute-extended-command nil "visual-line-mode" #("visual " 0 7 (face nil))) (org-insert-structure-template "src") (find-file "~/org/lang.org" t) (magit nil '((62 . 32) (("/home/jonat/R/Kren/" forge-get-repository nil)) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD~") . "a77145d") (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD") . "2ebf588") (magit--insert-pushremote-log-p) ((magit-get-upstream-branch nil) . #("origin/main" 0 11 (font-lock-face magit-branch-remote face magit-branch-remote))) ((magit-get-push-branch nil nil) . #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (font-lock-face magit-branch-remote face magit-branch-remote))) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "refs/stash")) (("/home/jonat/R/Kren/" "rev-parse" "--is-bare-repository") . "false
") (("/home/jonat/R/Kren/" magit-git-dir "BISECT_LOG") . "/home/jonat/R/Kren/.git/BISECT_LOG") (("/home/jonat/R/Kren/" magit-git-dir "REVERT_HEAD") . "/home/jonat/R/Kren/.git/REVERT_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "CHERRY_PICK_HEAD") . "/home/jonat/R/Kren/.git/CHERRY_PICK_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/applying") . "/home/jonat/R/Kren/.git/rebase-apply/applying") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/onto") . "/home/jonat/R/Kren/.git/rebase-apply/onto") (("/home/jonat/R/Kren/" magit-git-dir "rebase-merge") . "/home/jonat/R/Kren/.git/rebase-merge") (("/home/jonat/R/Kren/" magit-git-dir "MERGE_HEAD") . "/home/jonat/R/Kren/.git/MERGE_HEAD") (("/home/jonat/R/Kren/" "rev-parse" "--git-dir") . ".git") (("/home/jonat/R/Kren/" "describe" "--contains" "HEAD")) (("/home/jonat/R/Kren/" "describe" "--long" "--tags")) (("/home/jonat/R/Kren/" "rev-parse" "--verify" #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (font-lock-face magit-branch-remote face magit-branch-remote))) . "a77145dc31386bb8c17dada0adfc0d4927d6d7e9") ((magit-get-push-branch "main" nil) . #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (font-lock-face magit-branch-remote face magit-branch-remote))) (("/home/jonat/R/Kren/" "show" "--no-patch" "--format=%s" #("origin/main^{commit}" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote)) "--") . "init for github, add license, clean up Kren.R, add examples") ((magit-get-upstream-branch "main") . #("origin/main" 0 11 (font-lock-face magit-branch-remote face magit-branch-remote))) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "--abbrev-ref" "main@{upstream}") . "origin/main") (("/home/jonat/R/Kren/" "show" "--no-patch" "--format=%h %s" "HEAD^{commit}" "--") . "2ebf588 Move todo's to standalone file") (("/home/jonat/R/Kren/" "symbolic-ref" "--short" "HEAD") . "main") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD") . "2ebf5881693485f69c949c0ce4ea554677ce8004") (("/home/jonat/R/Kren/" . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("user.email" ("jonathanfung2000@gmail.com") "user.name" ("jonathanmfung") "credental.helper" ("store" "store" "store" "store" "store") "credential.helper" ("cache") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "remote.origin.url" ("git@github.com:jonathanmfung/Kren.git") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "remote.pushdefault" ("origin") "branch.main.remote" ("origin") "branch.main.merge" ("refs/heads/main") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/jonat/R/Kren/" forge-get-repository full)) (("/home/jonat/R/Kren/" "remote" "get-url" "origin") . "git@github.com:jonathanmfung/Kren.git") (("/home/jonat/R/Kren/" . magit-toplevel) . "/home/jonat/R/Kren/") (("/home/jonat/R/Kren/" "rev-parse" "--show-cdup") . "") (("/home/jonat/R/Kren/" "rev-parse" "--show-toplevel") . "/home/jonat/R/Kren"))) (execute-extended-command nil "magit" nil) (magit nil '((61 . 34) (("/home/jonat/R/Kren/" forge-get-repository nil)) (("/home/jonat/R/Kren/" "symbolic-ref" #("refs/remotes/origin/HEAD" 13 19 (font-lock-face magit-branch-remote face magit-branch-remote)))) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD~") . "f2b071c") (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD") . "a77145d") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD~10")) (magit--insert-pushremote-log-p) ((magit-get-upstream-branch nil) . #("origin/main" 0 11 (font-lock-face magit-branch-remote face magit-branch-remote))) ((magit-get-push-branch nil nil) . #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (font-lock-face magit-branch-remote face magit-branch-remote))) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "refs/stash")) (("/home/jonat/R/Kren/" "rev-parse" "--is-bare-repository") . "false
") (("/home/jonat/R/Kren/" magit-git-dir "BISECT_LOG") . "/home/jonat/R/Kren/.git/BISECT_LOG") (("/home/jonat/R/Kren/" magit-git-dir "REVERT_HEAD") . "/home/jonat/R/Kren/.git/REVERT_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "CHERRY_PICK_HEAD") . "/home/jonat/R/Kren/.git/CHERRY_PICK_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/applying") . "/home/jonat/R/Kren/.git/rebase-apply/applying") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/onto") . "/home/jonat/R/Kren/.git/rebase-apply/onto") (("/home/jonat/R/Kren/" magit-git-dir "rebase-merge") . "/home/jonat/R/Kren/.git/rebase-merge") (("/home/jonat/R/Kren/" magit-git-dir "MERGE_HEAD") . "/home/jonat/R/Kren/.git/MERGE_HEAD") (("/home/jonat/R/Kren/" "rev-parse" "--git-dir") . ".git") (("/home/jonat/R/Kren/" "describe" "--contains" "HEAD")) (("/home/jonat/R/Kren/" "describe" "--long" "--tags")) (("/home/jonat/R/Kren/" "rev-parse" "--verify" #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (font-lock-face magit-branch-remote face magit-branch-remote))) . "a77145dc31386bb8c17dada0adfc0d4927d6d7e9") ((magit-get-push-branch "main" nil) . #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (font-lock-face magit-branch-remote face magit-branch-remote))) (("/home/jonat/R/Kren/" "show" "--no-patch" "--format=%s" #("origin/main^{commit}" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote)) "--") . "init for github, add license, clean up Kren.R, add examples") ((magit-get-upstream-branch "main") . #("origin/main" 0 11 (font-lock-face magit-branch-remote face magit-branch-remote))) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "--abbrev-ref" "main@{upstream}") . "origin/main") (("/home/jonat/R/Kren/" "show" "--no-patch" "--format=%h %s" "HEAD^{commit}" "--") . "a77145d init for github, add license, clean up Kren.R, add examples") (("/home/jonat/R/Kren/" "symbolic-ref" "--short" "HEAD") . "main") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD") . "a77145dc31386bb8c17dada0adfc0d4927d6d7e9") (("/home/jonat/R/Kren/" . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("user.email" ("jonathanfung2000@gmail.com") "user.name" ("jonathanmfung") "credental.helper" ("store" "store" "store" "store" "store") "credential.helper" ("cache") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "remote.origin.url" ("git@github.com:jonathanmfung/Kren.git") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "remote.pushdefault" ("origin") "branch.main.remote" ("origin") "branch.main.merge" ("refs/heads/main") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/jonat/R/Kren/" forge-get-repository full)) (("/home/jonat/R/Kren/" "remote" "get-url" "origin") . "git@github.com:jonathanmfung/Kren.git") (("/home/jonat/R/Kren/" . magit-toplevel) . "/home/jonat/R/Kren/") (("/home/jonat/R/Kren/" "rev-parse" "--show-cdup") . "") (("/home/jonat/R/Kren/" "rev-parse" "--show-toplevel") . "/home/jonat/R/Kren"))) (execute-extended-command nil "magit" nil) (find-file "~/R/Kren/TODO.ORG" t) (magit nil '((58 . 32) (("/home/jonat/R/Kren/" forge-get-repository nil)) ((magit-get-upstream-branch "master")) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD~") . "f2b071c") (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD") . "a77145d") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD~10")) (magit--insert-pushremote-log-p . t) ((magit-get-upstream-branch nil)) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "--abbrev-ref" "master@{upstream}")) ((magit-get-push-branch nil nil) . #("origin/master" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 13 (font-lock-face magit-branch-remote face magit-branch-remote))) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "refs/stash")) (("/home/jonat/R/Kren/" "rev-parse" "--is-bare-repository") . "false
") (("/home/jonat/R/Kren/" magit-git-dir "BISECT_LOG") . "/home/jonat/R/Kren/.git/BISECT_LOG") (("/home/jonat/R/Kren/" magit-git-dir "REVERT_HEAD") . "/home/jonat/R/Kren/.git/REVERT_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "CHERRY_PICK_HEAD") . "/home/jonat/R/Kren/.git/CHERRY_PICK_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/applying") . "/home/jonat/R/Kren/.git/rebase-apply/applying") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/onto") . "/home/jonat/R/Kren/.git/rebase-apply/onto") (("/home/jonat/R/Kren/" magit-git-dir "rebase-merge") . "/home/jonat/R/Kren/.git/rebase-merge") (("/home/jonat/R/Kren/" magit-git-dir "MERGE_HEAD") . "/home/jonat/R/Kren/.git/MERGE_HEAD") (("/home/jonat/R/Kren/" "rev-parse" "--git-dir") . ".git") (("/home/jonat/R/Kren/" "describe" "--contains" "HEAD")) (("/home/jonat/R/Kren/" "describe" "--long" "--tags")) (("/home/jonat/R/Kren/" "rev-parse" "--verify" #("origin/master" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 13 (font-lock-face magit-branch-remote face magit-branch-remote)))) ((magit-get-push-branch "master" nil) . #("origin/master" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 13 (font-lock-face magit-branch-remote face magit-branch-remote))) (("/home/jonat/R/Kren/" "show" "--no-patch" "--format=%h %s" "HEAD^{commit}" "--") . "a77145d init for github, add license, clean up Kren.R, add examples") (("/home/jonat/R/Kren/" "symbolic-ref" "--short" "HEAD") . "master") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD") . "a77145dc31386bb8c17dada0adfc0d4927d6d7e9") (("/home/jonat/R/Kren/" . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("user.email" ("jonathanfung2000@gmail.com") "user.name" ("jonathanmfung") "credental.helper" ("store" "store" "store" "store" "store") "credential.helper" ("cache") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "remote.origin.url" ("git@github.com:jonathanmfung/Kren.git") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "remote.pushdefault" ("origin") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/jonat/R/Kren/" forge-get-repository full)) (("/home/jonat/R/Kren/" "remote" "get-url" "origin") . "git@github.com:jonathanmfung/Kren.git") (("/home/jonat/R/Kren/" . magit-toplevel) . "/home/jonat/R/Kren/") (("/home/jonat/R/Kren/" "rev-parse" "--show-cdup") . "") (("/home/jonat/R/Kren/" "rev-parse" "--show-toplevel") . "/home/jonat/R/Kren"))) (execute-extended-command nil "magit" nil) (magit-remote-add "origin" "git@github.com:jonathanmfung/Kren.git" '("-f")) (magit nil '((49 . 29) (("/home/jonat/R/Kren/" forge-get-repository nil)) ((magit-get-upstream-branch "master")) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD~")) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD") . "f2b071c") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD~10")) ((magit-get-upstream-branch nil)) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "--abbrev-ref" "master@{upstream}")) ((magit-get-push-branch nil nil)) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "refs/stash")) (("/home/jonat/R/Kren/" "rev-parse" "--is-bare-repository") . "false
") (("/home/jonat/R/Kren/" magit-git-dir "BISECT_LOG") . "/home/jonat/R/Kren/.git/BISECT_LOG") (("/home/jonat/R/Kren/" magit-git-dir "REVERT_HEAD") . "/home/jonat/R/Kren/.git/REVERT_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "CHERRY_PICK_HEAD") . "/home/jonat/R/Kren/.git/CHERRY_PICK_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/applying") . "/home/jonat/R/Kren/.git/rebase-apply/applying") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/onto") . "/home/jonat/R/Kren/.git/rebase-apply/onto") (("/home/jonat/R/Kren/" magit-git-dir "rebase-merge") . "/home/jonat/R/Kren/.git/rebase-merge") (("/home/jonat/R/Kren/" magit-git-dir "MERGE_HEAD") . "/home/jonat/R/Kren/.git/MERGE_HEAD") (("/home/jonat/R/Kren/" "rev-parse" "--git-dir") . ".git") (("/home/jonat/R/Kren/" "describe" "--contains" "HEAD")) (("/home/jonat/R/Kren/" "describe" "--long" "--tags")) ((magit-get-push-branch "master" nil)) (("/home/jonat/R/Kren/" "show" "--no-patch" "--format=%h %s" "HEAD^{commit}" "--") . "f2b071c init repo, init gitignore") (("/home/jonat/R/Kren/" "symbolic-ref" "--short" "HEAD") . "master") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD") . "f2b071ce6a8f0059d3086262b5630d9ea005e182") (("/home/jonat/R/Kren/" . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("user.email" ("jonathanfung2000@gmail.com") "user.name" ("jonathanmfung") "credental.helper" ("store" "store" "store" "store" "store") "credential.helper" ("cache") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/jonat/R/Kren/" forge-get-repository full)) (("/home/jonat/R/Kren/" . magit-toplevel) . "/home/jonat/R/Kren/") (("/home/jonat/R/Kren/" "rev-parse" "--show-cdup") . "") (("/home/jonat/R/Kren/" "rev-parse" "--show-toplevel") . "/home/jonat/R/Kren"))) (execute-extended-command nil "magit" nil) (kill-buffer ".gitignore") (magit nil '((50 . 30) (("/home/jonat/R/Kren/" forge-get-repository nil)) ((magit-get-upstream-branch "master")) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD~")) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD") . "f2b071c") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD~10")) ((magit-get-upstream-branch nil)) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "--abbrev-ref" "master@{upstream}")) ((magit-get-push-branch nil nil)) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "refs/stash")) (("/home/jonat/R/Kren/" "rev-parse" "--is-bare-repository") . "false
") (("/home/jonat/R/Kren/" "version") . "git version 2.35.1") (("/home/jonat/R/Kren/" magit-git-dir "BISECT_LOG") . "/home/jonat/R/Kren/.git/BISECT_LOG") (("/home/jonat/R/Kren/" magit-git-dir "REVERT_HEAD") . "/home/jonat/R/Kren/.git/REVERT_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "CHERRY_PICK_HEAD") . "/home/jonat/R/Kren/.git/CHERRY_PICK_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/applying") . "/home/jonat/R/Kren/.git/rebase-apply/applying") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/onto") . "/home/jonat/R/Kren/.git/rebase-apply/onto") (("/home/jonat/R/Kren/" magit-git-dir "rebase-merge") . "/home/jonat/R/Kren/.git/rebase-merge") (("/home/jonat/R/Kren/" magit-git-dir "MERGE_HEAD") . "/home/jonat/R/Kren/.git/MERGE_HEAD") (("/home/jonat/R/Kren/" "rev-parse" "--git-dir") . ".git") (("/home/jonat/R/Kren/" "describe" "--contains" "HEAD")) (("/home/jonat/R/Kren/" "describe" "--long" "--tags")) ((magit-get-push-branch "master" nil)) (("/home/jonat/R/Kren/" "show" "--no-patch" "--format=%h %s" "HEAD^{commit}" "--") . "f2b071c init repo, init gitignore") (("/home/jonat/R/Kren/" "symbolic-ref" "--short" "HEAD") . "master") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD") . "f2b071ce6a8f0059d3086262b5630d9ea005e182") (("/home/jonat/R/Kren/" . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("user.email" ("jonathanfung2000@gmail.com") "user.name" ("jonathanmfung") "credental.helper" ("store" "store" "store" "store" "store") "credential.helper" ("cache") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/jonat/R/Kren/" forge-get-repository full)) (("/home/jonat/R/Kren/" . magit-toplevel) . "/home/jonat/R/Kren/") (("/home/jonat/R/Kren/" "rev-parse" "--show-cdup") . "") (("/home/jonat/R/Kren/" "rev-parse" "--show-toplevel") . "/home/jonat/R/Kren"))) (execute-extended-command nil "magit" #("magit" 0 5 (face nil))) (find-file "~/R/Kren/.gitignore" t) (find-file "~/R/Kren/working.R" t) (find-file "~/R/Kren/lyrics/aespa-Savage.txt" t) (kill-buffer "LICENSE") (find-file "~/R/Kren/LICENSE" t) (find-file "~/R/Kren/examples/dummy_lyrics.txt" t) (org-redisplay-inline-images) (execute-extended-command nil "org-redisplay-inline-images" #("inline im" 0 9 (face nil))) (find-file "~/R/Kren/README.ORG" t) (find-file "~/R/Kren/Kren.R" t) (find-file "/home/jonat/R/Kren/examples/" t) (find-file "~/R/Kren/Kren.R" t) (find-file "~/R/Kren/examples/usage.R" t) (consult-yank-from-kill-ring #("print(paras_lines)" 0 5 (tb-index 10 fontified t face nil) 5 6 (tb-index 10 fontified t face (rainbow-delimiters-depth-2-face)) 6 17 (tb-index 10 fontified t face nil) 17 18 (tb-index 10 rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face))) nil) (consult-yank-from-kill-ring #("print(paras_lines)" 0 5 (tb-index 10 fontified t face nil) 5 6 (tb-index 10 fontified t face (rainbow-delimiters-depth-2-face)) 6 17 (tb-index 10 fontified t face nil) 17 18 (tb-index 10 rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face))) nil) (find-file "~/R/Kren/examples/dummy_lyrics.txt" t) (find-file "~/R/Kren/Kren.R" t) (find-file "~/R/Kren/examples/usage.R" t) (find-file "~/R/Kren/lyrics/fromis_9-DM.txt" t) (find-file "~/R/Kren/examples/dummy_lyrics.txt" t) (kill-buffer "*R:Kren*") (find-file "~/R/Kren/examples/usage.R" t) (mkdir "~/R/Kren/examples" t) (execute-extended-command nil "mkdir" #("mkdir" 0 5 (face nil))) (find-file "~/R/Kren/README.ORG" t) (find-file "~/R/Kren/Kren.R" t) (find-file "~/R/Kren/Kren.R" t) (kill-buffer "*R:Kren*") (kill-buffer "*R:Kren*") (magit nil '((50 . 30) (("/home/jonat/R/Kren/" forge-get-repository nil)) ((magit-get-upstream-branch "master")) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD~")) (("/home/jonat/R/Kren/" "rev-parse" "--short" "HEAD") . "f2b071c") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD~10")) ((magit-get-upstream-branch nil)) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "--abbrev-ref" "master@{upstream}")) ((magit-get-push-branch nil nil)) (("/home/jonat/R/Kren/" "rev-parse" "--verify" "refs/stash")) (("/home/jonat/R/Kren/" "rev-parse" "--is-bare-repository") . "false
") (("/home/jonat/R/Kren/" "version") . "git version 2.35.1") (("/home/jonat/R/Kren/" magit-git-dir "BISECT_LOG") . "/home/jonat/R/Kren/.git/BISECT_LOG") (("/home/jonat/R/Kren/" magit-git-dir "REVERT_HEAD") . "/home/jonat/R/Kren/.git/REVERT_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "CHERRY_PICK_HEAD") . "/home/jonat/R/Kren/.git/CHERRY_PICK_HEAD") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/applying") . "/home/jonat/R/Kren/.git/rebase-apply/applying") (("/home/jonat/R/Kren/" magit-git-dir "rebase-apply/onto") . "/home/jonat/R/Kren/.git/rebase-apply/onto") (("/home/jonat/R/Kren/" magit-git-dir "rebase-merge") . "/home/jonat/R/Kren/.git/rebase-merge") (("/home/jonat/R/Kren/" magit-git-dir "MERGE_HEAD") . "/home/jonat/R/Kren/.git/MERGE_HEAD") (("/home/jonat/R/Kren/" "rev-parse" "--git-dir") . ".git") (("/home/jonat/R/Kren/" "describe" "--contains" "HEAD")) (("/home/jonat/R/Kren/" "describe" "--long" "--tags")) ((magit-get-push-branch "master" nil)) (("/home/jonat/R/Kren/" "show" "--no-patch" "--format=%h %s" "HEAD^{commit}" "--") . "f2b071c init repo, init gitignore") (("/home/jonat/R/Kren/" "symbolic-ref" "--short" "HEAD") . "master") (("/home/jonat/R/Kren/" "rev-parse" "--verify" "HEAD") . "f2b071ce6a8f0059d3086262b5630d9ea005e182") (("/home/jonat/R/Kren/" . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("user.email" ("jonathanfung2000@gmail.com") "user.name" ("jonathanmfung") "credental.helper" ("store" "store" "store" "store" "store") "credential.helper" ("cache") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/jonat/R/Kren/" forge-get-repository full)) (("/home/jonat/R/Kren/" . magit-toplevel) . "/home/jonat/R/Kren/") (("/home/jonat/R/Kren/" "rev-parse" "--show-cdup") . "") (("/home/jonat/R/Kren/" "rev-parse" "--show-toplevel") . "/home/jonat/R/Kren"))) (execute-extended-command nil "magit" #("magit" 0 5 (face nil))) (find-file "~/R/Kren/README.ORG" t) (find-file "/home/jonat/R/Kren/Kren.R" t) (find-file "~/R/Kren/Kren.R" t) (undo-redo 1) (execute-extended-command nil "undo-redo" nil) (undo-redo 1) (execute-extended-command nil "undo-redo" #("redo" 0 4 (face nil))) (consult-yank-from-kill-ring #("lyrics_smry(aespa._.Savage1)$`mean(kr_word_prop)`" 0 4 (face nil fontified t tb-index 1) 4 11 (face nil fontified t tb-index 1) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t tb-index 1) 12 27 (face nil fontified t tb-index 1) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t tb-index 1) 28 29 (face nil fontified t tb-index 1) 29 49 (face (default) fontified t tb-index 1)) nil) (winner-mode 'toggle) (execute-extended-command nil "winner-mode" #("winner" 0 6 (face nil))) (find-file "~/R/Kren/README.ORG" t) (find-file "~/R/Kren/Kren.R" t) (find-file "~/R/Kren/README.ORG" t) (find-file "~/R/Kren/Kren.R" t) (find-file "~/janestreet/puzzle.org" t) (find-file "/tmp/allergy.jl" t) (kill-buffer "puzzle.jl") (find-file-read-only "~/janestreet/puzzle.jl" t) (org-timer-stop) (execute-extended-command nil "org-timer-stop" #("org timer" 0 9 (face nil))) (org-timer nil) (execute-extended-command nil "org-timer" #("org timer" 0 9 (face nil))) (helpful-key "-") (find-file "~/R/Kren/README.ORG" t) (find-file "~/org/resources/_statistics.org" t) (find-file "~/R/Kren/Kren.R" t) (message-caesar-buffer-body nil) (execute-extended-command nil "message-caesar-buffer-body" nil) (message-caesar-buffer-body nil)))
(setq ivy-history '(#("715 #+begin_src R :results graphics file :file /tmp/lec4.png :height 250 :session Lec4" 0 4 (point 31835 ivy-index 1) 4 5 (font-lock-fontified t src-block t line-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) wrap-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",\"00000100000000000000000002000000000000000000030000000000000000000400000000000000\",};" :mask heuristic :ascent center))) fontified t font-lock-multiline t face org-block-begin-line point 31835 ivy-index 1) 5 47 (font-lock-fontified t src-block t line-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) wrap-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) fontified t font-lock-multiline t face org-block-begin-line point 31835 ivy-index 1) 47 72 (font-lock-fontified t src-block t line-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) wrap-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) fontified t font-lock-multiline t face org-block-begin-line point 31835 ivy-index 1) 72 85 (font-lock-fontified t src-block t line-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) wrap-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) fontified t font-lock-multiline t face org-block-begin-line point 31835 ivy-index 1) 85 86 (font-lock-fontified t rear-nonsticky t src-block t line-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) wrap-prefix #(" " 0 1 (display (image :type xpm :data "/* XPM */
static char *rule[] = {\"80 21 9 1\",\"1 c #53521717acac\",\"2 c #8f8f00007573\",\"3 c #0000312fa9a9\",\"4 c #000053518b8b\",\"5 c #14145c5c3332\",\"6 c #868639372727\",\"7 c #979725250000\",\"8 c #7271100f4543\",\"0 c None};" :mask heuristic :ascent center))) fontified t font-lock-multiline t face org-block-begin-line point 31835 ivy-index 1))))
(setq bookmark-history '("init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" "init.el" #("init.el" 0 7 (face nil)) "init.el"))
(setq consult-imenu--history '("Data     comp_df" "Functions lyrics_smry" "Functions section_tree_to_df" "Functions lyrics_smry" "Functions lyrics_comp" "Functions lyrics_smry" "Functions parse_lyrics" "Functions lyrics_smry" "Functions parse_lyrics" "Functions section_tree_to_df" "Functions extract_features" "Functions raw_df" "Print cleanList" "Print tryPrint" "Print cleanList" "Print tryPrint" "Week 3: Culture 2. Components of Culture"))
(setq search-ring '(#("(a" 0 2 (isearch-case-fold-search t isearch-regexp-function nil)) #("bv" 0 2 (isearch-regexp-function nil isearch-case-fold-search t)) #("name" 0 4 (isearch-regexp-function nil isearch-case-fold-search t)) #("l" 0 1 (isearch-regexp-function nil isearch-case-fold-search t)) #("corr" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("bind" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("cu" 0 2 (isearch-regexp-function nil isearch-case-fold-search t)) #("emacs" 0 5 (isearch-regexp-function nil isearch-case-fold-search t)) #("wind" 0 4 (isearch-regexp-function nil isearch-case-fold-search t)) #("haskell" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("interac" 0 7 (isearch-case-fold-search t isearch-regexp-function t)) #("interacti" 0 9 (isearch-case-fold-search t isearch-regexp-function nil)) #("inter" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("interaction" 0 11 (isearch-case-fold-search t isearch-regexp-function nil)) #("int" 0 3 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq consult--buffer-history '("init.el􀀂" "*R:Kren*􀀁" "README.ORG􀀁" "Kren.R􀀁" "usage.R􀀁" "Kren.R􀀁" "usage.R􀀁" "Kren.R􀀁" "fromis_9-DM.txt􀀁" "usage.R􀀁" "Kren.R􀀁" "usage.R􀀁" "Kren.R􀀁" "README.ORG􀀁" "*R:Kren*􀀁" "Kren.R􀀁" "README.ORG􀀁" "*R:Kren*􀀁" "init.el􀀁" "*scratch*􀀁" "init.el􀀂" "_mathematics.org􀀁" "init.el􀀁" "_statistics.org􀀁" "_mathematics.org􀀁" "*scratch*􀀁" "_mathematics.org􀀁" "*scratch*􀀁" "init.el􀀁" "init.el􀀂" "README.ORG􀀁" "Kren.R􀀁" "*R*􀀁" "README.ORG􀀁" "*R*􀀁" "*scratch*􀀁" "init.el􀀂" "*scratch*􀀁" "init.el􀀂" "*Messages*􀀁" "init.el􀀁" "Kren.R􀀁" "init.el􀀁" "*R*􀀁" "Kren.R􀀁" "init.el􀀁" "Kren.R􀀁" "init.el􀀁" "*R*􀀁" "Kren.R􀀁" "*scratch*􀀁" "Kren.R􀀁" "STAYC-STEREOTYPE.txt􀀁" "Kren.R􀀁" "aespa-Savage.txt􀀁" "init.el􀀁" "early-init.el􀀁" "Kren.R􀀁" "init.el􀀁" "Kren.R􀀁" "init.el􀀂" "*scratch*􀀁" "fromis_9-DM.txt􀀁" "init.el􀀂" "*R*􀀁" "hw5􀀁" "_statistics.org􀀁" "hw5􀀁" "_statistics.org􀀁" "lec9􀀁" "_statistics.org􀀁" "core.clj􀀁" "dyn.clj􀀁" "core.clj􀀁" "dyn.clj􀀁" "init.el􀀁" "*cider-repl clojure/my-sketch:localhost:39395(clj)*􀀁" "init.el􀀂" "_statistics.org􀀁" "hw4􀀁" "_statistics.org􀀁" "hw4􀀁" "_statistics.org􀀁" "hw4􀀁" "lec9􀀁" "_statistics.org􀀁" "*helpful command: save-buffers-kill-terminal*􀀁" "init.el􀀁" "*scratch*􀀁" "_statistics.org􀀁" "lec9􀀁" "*scratch*􀀁" "_statistics.org􀀁" "init.el􀀁" "_statistics.org􀀁" "*scratch*􀀁" "early-init.el􀀁" "init.el􀀁" "dunstrc_old􀀁" "dunstrc<.config>􀀁"))
(setq read-expression-history '("(setq org-edit-src-content-indentation 0)" "(speedbar 1)" "(align-regexp \"<-\")" "(align-regexp)" "(jf/ace-window-message--helper)" "(null confirm-kill-emacs)" "(y-or-n-p \"hello\")" "(setq confirm-kill-emacs #'yes-or-no-p)" "(setq confirm-kill-emacs 'y-or-n-p)" "(- 0.5 0.33)" "(+ 0.5 0.33)" "(- 0.5 0.33)" "(display-monitor-attributes-list)" "(display-pixel-width)" "(frame-size)" "(window-size)" "(/ 90 1.5)" "(/ 90 1.25)" "norm" "(/ 70 1.5)" "(/ 60 1.5)" "(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)" "(load 'org)" "(setq org-use-extra-keys t)" "(set org-use-extra-keys t)" "(setq inferior-lisp-program \"/usr/bin/sbcl\")" "(setq scroll-preserve-screen-position nil)" "(setq scroll-preserve-screen-position 1)" "(setq popwin:special-display-config '((helpful-mode :stick t) (\"*HS-Error*\" :stick t) process-menu-mode helpful-mode (\"*Miniedit Help*\" :noselect t) help-mode (completion-list-mode :noselect t) (compilation-mode :noselect t) (grep-mode :noselect t) (occur-mode :noselect t) (\"*Pp Macroexpand Output*\" :noselect t) \"*Shell Command Output*\" \"*vc-diff*\" \"*vc-change-log*\" (\" *undo-tree*\" :width 60 :position right) (\"^\\\\*anything.*\\\\*$\" :regexp t) \"*slime-apropos*\" \"*slime-macroexpansion*\" \"*slime-description*\" (\"*slime-compilation*\" :noselect t) \"*slime-xref*\" (sldb-mode :stick t) slime-repl-mode slime-connection-list-mode 1))" "(setq org-format-latex-options '(:foreground default :background default :scale 4.0 :html-foreground \"Black\" :html-background \"Transparent\" :html-scale 1.0 :matchers (\"begin\" \"$1\" \"$\" \"$$\" \"\\\\(\" \"\\\\[\")))" "(setq org-format-latex-options '(:foreground default :background default :scale 3.0 :html-foreground \"Black\" :html-background \"Transparent\" :html-scale 1.0 :matchers (\"begin\" \"$1\" \"$\" \"$$\" \"\\\\(\" \"\\\\[\")))" "(zap-up-to-char -1 ?/)" "(other-buffer)" "(marginalia-mode)" "(completing-read-multiple)" "(print aw-display-mode-overlay)" "(setq aw-display-mode-overlay t)" "(setq aw-display-mode-overlay nil)" "(cycle-spacing -1)" "(pulse-momentary-highlight-one-line (point))" "(setq aw-display-mode-overlay nil)" "(print flycheck-display-errors-delay)" "(modus-themes-contrast)" "(setq window-divider-default-places 'bottom-only)" "(print window-divider-default-places )" "(set-fontset-font t nil (font-spec :size 20 :name \"DejaVu Sans\"))" "(set-fontset-font t nil (font-spec :name \"DejaVu Sans\"))" "(set-fontset-font t nil (font-spec :name \"Dejavu Sans\"))" "(print window-system)" "(getenv \"SHELL\")" "(setq lsp-haskell-server-path \"/home/jonat/.ghcup/bin/haskell-language-server-wrapper\")" "(setq avy-background nil)" "(setq avy-background t)" "(nav-flash-show)" "(cursor-flash-mode)" "(draw-cons-tree '(a b (c nil 1)))" "(icomplete-vertical-mode)" "(setq icomplete-separator \"\\n\")"))
(setq yes-or-no-p-history '("yes" "y" "yes" "y" "yes" "no" "yes"))
(setq read-number-history '("60" "b" "100" "80"))
(setq consult--line-history '("org" "parse" "æ" "fromis" "fpp" "label" "parse meta" "parse_meta" "glm" "ad lib" "ess" "mean" "embark" "lsp" "topspa" "visu" "mouse" "latex" "aespa" "parse_lyr" "parse_lyrics" "axis" "kr_prop" "stay" "dat" "hangulp con" "kr_prop" "chist" "mutate" "corfu" "lsp" "company" "modus compl" "company" "modus" "message helper" "helper dis" "window display" "modus" "pin" "modus" "elpa" "modus" "company" "map" "ace window" "data to df" "data_to_df" "data_to" "hangulp" "\\.id" "factor" "names" "bernoulli" "binomial" "lispy" "slime" "col" "seq" "dens for" "org" "org-mode" "extract" "backdoor cri" "backdoor" "pipe" "width" "font" "geom" "geome" "display image" "scale 3" "lec 7" "scale" "sex" "scale" "contrast" "prior predict" "quap" "lines(" "list" "consult" "popwin" "name" "elli" "hook" "org" "modus" "org-mode" "org-bars" "org" "org-mode" "org" "down" "Down" "identity" "focus mode 10" "workspace" "\\+p" "bpm"))
(setq buffer-name-history '("lisp.el" "*R:Kren*" "README.ORG" ".gitignore" "Kren.R" "usage.R" "Kren.R" "usage.R" "LICENSE" "Kren.R" "fromis_9-DM.txt" "usage.R" "Kren.R" "usage.R" "Kren.R" "README.ORG" "*R:Kren*" "README.ORG" "*R:Kren*" "Kren.R" "README.ORG" "*R:Kren*" "puzzle.jl" "*R:Kren*" "init.el" "*scratch*" "embark.el" "_mathematics.org" "init.el" "_statistics.org" "_mathematics.org" "*scratch*" "_mathematics.org" "*scratch*" "init.el" "config" "init.el" "README.ORG" "*R*" "README.ORG" "Kren.R" #("*R*" 0 3 (face nil)) "README.ORG" "*R*" "README.ORG" "*R*" "fromis_9-DM.txt" "aespa-Savage.txt" "STAYC-STEREOTYPE.txt" "BLACKPINK-PrettySavage.txt" "*R*" "*scratch*" "*Messages*" "*helpful macro: use-package*" "use-package-core.el" "init.el" "Kren.R" "init.el" "*R*" "Kren.R" "init.el" "Kren.R" "init.el" "*R*" "Kren.R" "*scratch*" "*R*" "Kren.R" "*R*" "STAYC-STEREOTYPE.txt" "Kren.R" "aespa-Savage.txt" "init.el" #("early-init.el" 0 13 (face nil)) "*R*" "Kren.R" "init.el" "*R*" "init.el" "Kren.R" "*scratch*" "*R*" "fromis_9-DM.txt" "init.el" "test.org" #("*R*" 0 3 (face nil)) "project.clj<my-sketch>" "hw5" "_statistics.org" "hw5" "_statistics.org" #("lec9" 0 4 (face nil)) "_statistics.org" "core.clj" "dyn.clj" "core.clj" "dyn.clj" "*cider-repl clojure/my-sketch:localhost:37615(clj)*" "*cider-repl clojure/my-sketch:localhost:39145(clj)*" "*cider-error*"))
(setq file-name-history '("~/julia/lisp.jl" "~/org/lang.org" "~/R/Kren/TODO.ORG" "~/R/Kren/.gitignore" "~/R/Kren/working.R" "~/R/Kren/lyrics/aespa-Savage.txt" "~/R/Kren/LICENSE" "~/R/Kren/examples/dummy_lyrics.txt" "~/R/Kren/README.ORG" "~/R/Kren/Kren.R" "~/R/Kren/examples/" "/home/jonat/R/Kren/examples/" "~/R/Kren/Kren.R" "~/R/Kren/examples/" "~/R/Kren/examples/usage.R" "~/R/Kren/examples/dummy_lyrics.txt" "~/R/Kren/Kren.R" "~/R/Kren/examples/" "~/R/Kren/examples/usage.R" "~/R/Kren/lyrics/fromis_9-DM.txt" "~/R/Kren/examples/dummy_lyrics.txt" "~/R/Kren/examples/" "~/R/Kren/examples/usage.R" "~/R/Kren/examples" "~/R/Kren/README.ORG" "~/R/Kren/" "~/R/Kren/Kren.R" "~/R/Kren/" "~/R/Kren/Kren.R" "~/R/Kren/" "~/R/Kren/README.ORG" "~/R/Kren/" "/home/jonat/R/Kren/Kren.R" "~/R/Kren/" "~/R/Kren/Kren.R" "~/R/Kren/README.ORG" "~/R/Kren/" "~/R/Kren/Kren.R" "~/R/Kren/README.ORG" "~/R/Kren/" "~/R/Kren/Kren.R" "~/janestreet/puzzle.org" "/tmp/allergy.jl" "~/janestreet/puzzle.jl" "~/R/Kren/README.ORG" "~/org/resources/_statistics.org" "~/R/Kren/Kren.R" "~/R/Kren/README.ORG" "~/R/Kren/" "~/R/Kren/Kren.R" "/tmp/test.hs" "~/.config/i3/" "~/org/resources/_statistics.org" "~/org/resources/_mathematics.org" "~/R/Kren/" "~/R/Kren/lyrics/aespa-Savage.txt" "~/R/Kren/" "~/R/Kren/lyrics/fromis_9-DM.txt" "~/R/Kren/lyrics/aespa-Savage.txt" "~/R/Kren/lyrics/BLACKPINK-PrettySavage.txt" "~/R/Kren/lyrics/STAYC-STEREOTYPE.txt" "~/R/Kren/README.ORG" "~/R/Kren/" "~/R/Kren/Kren.R" "~/R/Kren/README.ORG" "~/R/Kren/" "~/julia/TwitterNetwork/" "~/R/Kren/README.ORG" "~/R/Kren/lyrics/BLACKPINK-PrettySavage.txt" "~/R/Kren/" "~/R/Kren/lyrics/STAYC-STEREOTYPE.txt" "~/R/Kren/" "~/R/Kren/lyrics/aespa-Savage.txt" "~/.config/emacs-configs/emacs.d-my-vanilla/early-init.el" "~/R/Kren/" "/tmp/test.org" "~/R/Kren/" "~/R/Kren/lyrics/fromis_9-DM.txt" "~/R/Kren/" "~/R/Kren/lyrics/fromis_9-DM.txt" "~/R/Kren/lyrics" "~/R/Kren/Kren.R" "~/R/" "~/R/EN-KR_syllable.R" "~/clojure/my-sketch/src/my_sketch/dyn.clj" "~/clojure/sketch/src/clj/sketch/dynamic.clj" "~/clojure/sketch/src/clj/sketch/core.clj" "~/clojure/my-sketch/project.clj" "~/clojure/sketch/project.clj" "~/org/resources/" "/home/jonat/org/resources/_statistics.org" "~/clojure/my-sketch/project.clj" "~/clojure/my-sketch/src/my_sketch/dyn.clj" "~/clojure/my-sketch/src/my_sketch/core.clj" "~/clojure/my-sketch/project.clj" "~/clojure/my-sketch/src/my_sketch/core.clj" "~/org/resources/" "~/org/resources/_statistics.org" "~/org/resources/" "~/org/resources/_statistics.org"))
(setq minibuffer-history '("looking-at" "forward-sexp-function" "forward-sexp" "parse-sexp-ignore-comments" "parse-partial-sexp" "parse-sexp-ignore-comments" "org-edit-src-content-indentation" "1" "git@github.com:jonathanmfung/Kren.git" "origin" "1" "315" "1" "#" "comint-scroll-to-bottom-on-output" "embark-act" "C-" "embark" "completion-at-point-functions" "topspace-20220304.2335" "tab-always-indent" "procesing" "ruditementary" "<-" "align-regexp" "<-" "corfu-preselect-first" "modus-themes-completions" "modus-themes-20220226.1619" "modus-themes-2.0.0" "modus-vivendi" "modus-operandi" "package-archive-priorities" "modus-themes-2.2.0" "modus-themes-2.0.0" "modus-operandi" "use-package" "modus-themes-20220226.359" "modus-themes" "modus-themes-20220226.359" "modus-themes" "modus-themes-20210726.1850" "completion-at-point-functions" "ace-window-display-mode-hook" "aw-background" "ace-window" "recenter-positions" "View-scroll-half-page-forward" "latex" "<-" "rx" "lispy" "swap!" "1" "dir" ":session hw5" "header-args:R" "org-babel-comint-async-indicator" "1" "@b" "1" "univeristy" "1" "confirm-kill-emacs" "save-buffers-kill-terminal" "confirm-kill-emacs" "save-buffers-kill-emacs" "confirm-kill-processes" "server-save-buffers-kill-terminal" "save-buffers-kill-terminal" "confirm-kill-emacs" "minibuffer-confirm-exit-commands" "1" "@b" "1" "@b" "1" "@b" "1" "org-mode" "org" "org-mode" "1" "2" "1" "@b" "1" "3" "1" "@b" "1" "4" "1" "@b" "2" "1" "@b" "1" "org-format-latex-options" "org-highlight-latex-and-related"))
(setq extended-command-history '("replace-regexp" "visual-line-mode" "magit" "org-redisplay-inline-images" "mkdir" "magit" "undo-redo" "winner-mode" "org-timer-stop" "org-timer" "message-caesar-buffer-body" "inferior-ess-r-mode" "text-mode" "iedit-mode" "global-topspace-mode" "package-delete" "topspace-recenter-buffer" "package-refresh-contents" "org-fragtog-mode" "magit" "undo-redo" "completion-at-point" "read-only-mode" "ess-r-mode" "speedbar-mode" "speedbar" "read-only-mode" "align-regexp" "org-todo" "describe-face" "global-company-mode" "company-mode" "global-company-mode" "eldoc" "company-mode" "show-paren-mode" "package-refresh-contents" "package-delete" "modus-themes-load-operandi" "package-refresh-contents" "package-delete" "modus-themes-toggle" "helpful-at-point" "eldoc" "debug-watch" "debug" "modus-themes-load-operandi" "package-delete" "package-refresh-contents" "package-delete" "package-refresh-contents" "package-delete" "package-refresh-contents" "company-R-objects" "eldoc" "global-eldoc-mode" "eldoc" "ess-rutils-html-docs" "nano-modeline-mode" "ace-window-display-mode" "scroll-lock-mode" "View-scroll-half-page-backward" "org-mode" "undo-redo" "describe-face" "replace-regexp" "lispy-eval-and-replace" "ess-eval-buffer" "align-regexp" "rainbow-delimiters-mode" "mkdir" "undo-redo" "cider-repl-set-ns" "cider-restart" "package-reinstall" "package-install" "package-refresh-contents" "describe-package" "lispy-mode" "cider-restart" "lispy-mode" "cider-mode" "lispy-mode" "cider-jack-in-clj" "package-refresh-contents" "package-delete" "org-redisplay-inline-images" "org-babel-insert-header-arg" "org-set-property" "org-babel-execute-subtree" "recover-this-file" "org-redisplay-inline-images" "org-narrow-to-subtree" "org-redisplay-inline-images" "org-babel-execute-subtree" "org-babel-execute-maybe" "org-edit-inline-src-code" "save-buffers-kill-terminal--safe" "my-kill-terminal" "emacs-lisp-mode"))
